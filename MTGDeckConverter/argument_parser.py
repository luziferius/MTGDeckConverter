# Copyright (C) 2019 Thomas Hess <thomas.hess@udo.edu>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

from argparse import ArgumentParser
import itertools
from pathlib import Path
from typing import NamedTuple, Optional, List, Iterable, Union

import av1transcoder.constants

__all__ = [
    "Namespace",
    "parse_args",
]



class Namespace(NamedTuple):
    """
    Mocks the namespace generated by the ArgumentParser. Used for type checking and hinting.
    This has to be manually kept in sync with the actual implementation below for accurate 
    static analysis.
    """

    verbose: bool
    cutelog_integration: bool


def _generate_argument_parser() -> ArgumentParser:
    """
    Generates the argument parser.
    
    BEWARE: When using this directly, make sure to implement all option dependencies in the Namespace returned
    from parsing the arguments with the returned argument parser.
    Recommended: Use the module-global function parse_args() instead of this function.
    :return: ArgumentParser instance
    """
    
    # BEWARE: If changing this function, always update the Namespace NamedTuple above,
    # if the structure of the parsing result will change.
    description = "Convert digital Magic The Gathering (R) deck lists between formats."
    epilog = ""
    parser = ArgumentParser(description=description, fromfile_prefix_chars="@", epilog=epilog)
    parser.add_argument(
        "-v", "--version", action="version",
        version=f"{av1transcoder.constants.PROGRAMNAME} Version {av1transcoder.constants.VERSION}"
    )
    parser.add_argument(
        "-V", "--verbose",
        action="store_true",
        help="Increase output verbosity. Also show debug messages on the standard output."
    )
    parser.add_argument(
        "--cutelog-integration",
        action="store_true",
        help="Connect to a running cutelog instance with default settings to display the full program log. "
             "See https://github.com/busimus/cutelog"
    )

    return parser


def parse_args() -> Namespace:
    """
    Generates the argument parser and use it to parse the command line arguments.
    Implement all argument dependencies, as given in the help descriptions.
    :return: Parsed command line arguments
    """
    args: Namespace = _generate_argument_parser().parse_args()

    return args
